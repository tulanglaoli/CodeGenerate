using System.Collections;
using System.Text;
using System;
using System.Collections.Generic;


namespace DTDManager
{
    public class DTDParse
    {

        private string m_source;
        private int m_idx;

        public static bool IsWhiteSpace(char ch)
        {
            return ("\t\n\r ".IndexOf(ch) != -1);
        }

        public static int IsInkey(char ch,string key)
        {
            return key.IndexOf(ch);
        }

        public void EatWhiteSpace()
        {
            while (!Eof())
            {
                if (!IsWhiteSpace(GetCurrentChar()))
                    return;
                Advance();
            }
        }

        public int EatSpecialKey(string key)
        {
            int i = -1;
            while (!Eof())
            {
                i = IsInkey(GetCurrentChar(),key);
                if ( i==-1)
                    return i;
                Advance();
            }
            return -1;
        }


        public bool Eof()
        {
            return (m_idx >= m_source.Length);
        }


        public char GetCurrentChar()
        {
            return GetCurrentChar(0);
        }

        public char GetCurrentChar(int peek)
        {
            if ((m_idx + peek) < m_source.Length)
                return m_source[m_idx + peek];
            else
                return (char)0;
        }

        

        public char AdvanceCurrentChar()
        {
            return m_source[Advance()];
        }

        public int Advance()
        {
            return m_idx++;
        }

        public string Source
        {
            get
            {
                return m_source;
            }

            set
            {
                m_source = value;
            }
        }


        public string ParseWord(string key)
        {
            StringBuilder element = new StringBuilder();
            
            while ( IsInkey(GetCurrentChar(), key) == -1)
            {
                element.Append(AdvanceCurrentChar());
            }
            
            return element.ToString().Trim();
        }

        



        public string ParseAttributeName()
        {
            StringBuilder attribute = new StringBuilder();
            EatWhiteSpace();

            while (!Eof())
            {
                if (GetCurrentChar() == ':')
                {
                    Advance();
                    break;
                }
                attribute.Append(GetCurrentChar());
                Advance();
            }

            EatWhiteSpace();
            return attribute.ToString().Trim();
        }

        public string ParseAttributeValue()
        {
            StringBuilder attribute = new StringBuilder();
            EatWhiteSpace();
            while (!Eof())
            {
                if (GetCurrentChar() == ';')
                {
                    Advance();
                    break;
                }
                attribute.Append(GetCurrentChar());
                Advance();
            }

            EatWhiteSpace();
            return attribute.ToString().Trim();
        }

        public List<DTDBody> Parse()
        {
            List<DTDBody> ListDTD = new List<DTDBody>();
            ParseState p = ParseState.Start;
            while (!Eof())
            {
                DTDBody DB = Parse(ref p);
                if(DB!=null && p == ParseState.End)
                {
                    ListDTD.Add(DB);
                    p = ParseState.Start;
                }
            }
            return ListDTD;
        }

        public DTDBody Parse(ref ParseState p)
        {
            DTDBody DB = new DTDBody();
            string error = "Some Error Happened!";
            DTDATTLISTItem DE = new DTDATTLISTItem();
            while (p != ParseState.End)
            {
                
                switch (p)
                {
                    case ParseState.Start:
                        if (!Eof())
                        {
                            if (AdvanceCurrentChar() == '!')
                            {
                                p = ParseState.ElementOrATTList;
                                EatWhiteSpace();
                            }
                        }
                        else
                        {
                            DB = null;
                            p = ParseState.End;
                        }
                        break;
                    case ParseState.ElementOrATTList:
                        string t = ParseWord("\t\n\r ");
                        EatSpecialKey("\t\n\r ");
                        if (t == "ELEMENT")
                            p = ParseState.BodyName;
                        else if (t == "ATTLIST")
                            p = ParseState.BodyName2;
                        else
                        {
                            error = "该类型不属于ELEMENT也不属于ATTLIST!";
                            p = ParseState.error;
                        }
                        break;
                    case ParseState.BodyName:
                        string bn  = ParseWord("\t\n\r ");
                        EatSpecialKey("\t\n\r ");
                        DB.Name = bn;
                        DB.DTDelement.Name = bn;
                        if (GetCurrentChar() == '(')
                            p = ParseState.Islist;
                        else
                            p = ParseState.Nolist;
                        break;
                    case ParseState.Islist:
                        string il = ParseWord(")").Remove(0);
                        EatSpecialKey(")");
                        string[] l = il.Split(new char[1] { '|' });
                        DB.DTDelement.ElementValue = l;
                        p = ParseState.Type;
                        break;
                    case ParseState.Nolist:
                        string i = ParseWord("\t\n\r >");
                        EatSpecialKey("\t\n\r ");
                        DB.DTDelement.ElementValue = new string[1]{i};
                        break;
                    case ParseState.Type:
                        DB.DTDelement.TypeValue = ParseWord("\t\n\r >");
                        EatSpecialKey("\t\n\r ");
                            p = ParseState.Isend;
                        break;
                    case ParseState.BodyName2:
                        string bn2 = ParseWord("\t\n\r ");
                        if (DB.Name == )
                        {
                            EatSpecialKey("\t\n\r ");
                            if (GetCurrentChar() != '>')
                                p = ParseState.ItemName;
                            else
                                p = ParseState.Isend;

                        }
                        else
                        {
                            error = "Element's Name != ATTLIST's Name";
                            p = ParseState.error; ;
                        }
                            
                        break;
                    case ParseState.ItemName:
                        string n = ParseWord("\t\n\r ");
                        EatSpecialKey("\t\n\r ");
                        if (DE == null)
                        {
                            DE = new DTDATTLISTItem();
                            
                        }
                        DE.Name = n;
                        p = ParseState.TypeValue;
                        break;
                    case ParseState.TypeValue:
                        string[] type = ParseWord("\t\n\r ").Replace("(", "").Replace(")", "").Split(new char[1]{'|'},System.StringSplitOptions.RemoveEmptyEntries);
                        EatSpecialKey("\t\n\r ");
                        DE.TypeValue = type;
                        p = ParseState.DefaultValue;
                        break;
                    case ParseState.DefaultValue:
                        string d = ParseWord("\t\n\r ");
                        if (GetCurrentChar() == '>' || d.Contains(">"))
                        {
                            DE.DefaultValue = d.Replace(">", "");
                            p = ParseState.Isend;
                        }
                        else
                        {
                            DE.DefaultValue = d;
                            DB.DTDAttList.Add(DE);
                            DE = new DTDATTLISTItem();
                            p = ParseState.ItemName;
                        }
                        break;
                    case ParseState.Isend:
                        while (!Eof())
                        {
                            if (GetCurrentChar() == '<')
                            {
                                if (GetCurrentChar(2) == 'A')
                                    p = ParseState.Start;
                                else
                                    p = ParseState.End;
                                break;
                            }
                            else
                            {
                                Advance();
                                p = ParseState.End;
                            }
                        }
                        
                        
                        break;
                    case ParseState.End:
                        break;
                    case ParseState.error:
                        throw new Exception(error);
                    default:
                        break;
                }
            }
            return DB;
        }

        public enum ParseState
        {
            Start=1,
            ElementOrATTList,
            BodyName,
            Islist,
            Nolist,
            Type,
            BodyName2,
            ItemName,
            TypeValue,
            DefaultValue,
            Isend,
            End,
            error
        }
    }
}
